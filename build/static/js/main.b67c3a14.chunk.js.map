{"version":3,"sources":["firebase.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","input","setInput","open","setOpen","className","List","ListItem","ListItemAvatar","todo","Modal","onClose","e","placeholder","value","onChange","event","target","Button","type","onClick","preventDefault","collection","doc","id","set","merge","variant","color","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","disabled","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b67c3a14.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// const firebaseConfig = {\r\n\r\n// };\r\n\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyDpH9zR8Ix2cBzQJFG9dcJPaSH_fUe3gJI\",\r\n  authDomain: \"todo-app-bdae8.firebaseapp.com\",\r\n  projectId: \"todo-app-bdae8\",\r\n  storageBucket: \"todo-app-bdae8.appspot.com\",\r\n  messagingSenderId: \"591501581754\",\r\n  appId: \"1:591501581754:web:9041febf422cd25fa61183\",\r\n  measurementId: \"G-VFK7GBB2RP\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport { db };\r\n","import {\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Modal,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { db } from \"./firebase\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport \"./Todo.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  //documentation in mateial ui\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Todo(props) {\r\n  const classes = useStyles();\r\n  const [input, setInput] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = (event) => {\r\n    event.preventDefault();\r\n    setOpen(true);\r\n  };\r\n\r\n  const updateTodo = (event) => {\r\n    //update todo_item with new input text\r\n    event.preventDefault();\r\n    db.collection(\"TODOS\").doc(props.todo.id).set(\r\n      {\r\n        todo: input,\r\n      },\r\n      { merge: true }\r\n    ); //NOT REMOVE THE ID BUT TO MERGE THE TIMESTAMP AND UPDATE\r\n    setOpen(false);\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"todo\">\r\n        {/* TODO ITEM */}\r\n\r\n        <List className=\"todo_item\">\r\n          <ListItem>\r\n            <ListItemAvatar></ListItemAvatar>\r\n            <h>{props.todo.todo}</h>\r\n            {/* <ListItemText primary={props.todo.todo} secondary=\"deadline\" /> */}\r\n          </ListItem>\r\n        </List>\r\n\r\n        <div className=\"todo_container\">\r\n          {/* EDIT TODO */}\r\n          <div className=\"todo_edit\">\r\n            \r\n              <Modal open={open} onClose={(e) => setOpen(false)}>\r\n                <div className={classes.paper}>\r\n                <h1>Update Your To-do Here</h1>\r\n                <form>\r\n                  <input\r\n                    className=\"todo_input\"\r\n                    placeholder={props.todo.todo}\r\n                    value={input}\r\n                    onChange={(event) => setInput(event.target.value)}\r\n                  />\r\n                  <Button\r\n                    className=\"todo_update_button\"\r\n                    type=\"submit\"       //this is important\r\n                    onClick={updateTodo}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                  >\r\n                    Update the To-do\r\n                  </Button>\r\n                  </form>\r\n                </div>\r\n              </Modal>\r\n\r\n          </div>\r\n\r\n          {/* DELETE TODO */}\r\n          <DeleteIcon\r\n            className=\"todo_delete_icon\"\r\n            onClick={(event) => {\r\n              db.collection(\"TODOS\").doc(props.todo.id).delete();\r\n            }}\r\n          >\r\n            DELETE THIS ITEM\r\n          </DeleteIcon>\r\n\r\n          <button className=\"todo_edit_button\" onClick={(e) => setOpen(true)}>\r\n            EDIT TODO\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Todo;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport Todo from \"./Todo\";\nimport { db } from \"./firebase\";\nimport firebase from 'firebase'\n\nfunction App() {\n  const [todos, setTodos] = useState([\"TODO\", \"YOYO\", \"YES YES\",\"TODO\", \"YOYO\", \"YES YES\"]);\n  const [input, setInput] = useState(\"\"); //INITIALLY EMPTY INPUT mamking it blank\n\n  // when app loads, need to listen from db and fetxh new todos as they get added or removed\n  useEffect(() => {\n    //this code fires when app runs\n    db.collection('TODOS').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => (\n        {  id: doc.id,\n          todo: doc.data().todo\n        }\n      )))\n  })\n\n  }, [input])     //once it loads this fires .. and then we need to fire it whe it changes\n\n  const addTodo = (event) => {\n    //TO FIRE OFF DATA ON BUTTON CLICK\n    event.preventDefault(); //form submits evrytime on enter click but refreshes so to prevent that ---> default used\n\n    db.collection('TODOS').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setTodos([...todos, input]); //making array and keeping the prev state and update it with input\n    setInput(\"\"); //to clear the input after hitting enter\n  };\n  return (\n    <div className=\"app\">\n      <h1>MY TO-DO LIST</h1>\n      <form>\n        {/* <input className=\"input\" value={input} onChange={event => setInput(event.target.value) }/>     value >>  empty as intialised empty at first  setinput >>> to change everytime input on change of value keeps the input rendered and we have it in memory */}\n        {/* <button onClick={addTodo}>ADD TO TODO LIST</button> */}\n\n        <FormControl className=\"input_container\">\n          <InputLabel className=\"app_heading\"></InputLabel>\n          <input\n            placeholder=\"Write A Task Here...\"\n            className=\"app_input\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          ></input>\n          <Button\n            className=\"app_button\"\n            disabled={!input}\n            type=\"submit\"\n            onClick={addTodo}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            ADD TO LIST\n          </Button>\n        </FormControl>\n      </form>\n      <ul className=\"app_items\">\n        {todos.map((todo) => (\n          <Todo todo={todo} />\n        ))}{\" \"}\n        {/*todos>>>array map>>>goes to each element in the array todo>>>the element in the array*/}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}